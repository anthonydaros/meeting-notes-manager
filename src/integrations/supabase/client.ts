// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ktrbaiijlhssaxpxpzhj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt0cmJhaWlqbGhzc2F4cHhwemhqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA2NjE2MDksImV4cCI6MjA1NjIzNzYwOX0.k2MVB81LUxuAc2PMJOgO8U4yk_lLbNzTkCbqErd0nqE";

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error('Missing Supabase environment variables');
}

// Limpar qualquer sessão existente no localStorage
try {
  const currentTheme = localStorage.getItem('theme');
  localStorage.clear();
  if (currentTheme) {
    localStorage.setItem('theme', currentTheme);
  }
} catch (error) {
  console.error("[Supabase] Error clearing localStorage:", error);
}

console.log("[Supabase] Initializing client...");

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storage: window.localStorage,
    storageKey: 'supabase.auth.token',
    flowType: 'pkce'
  },
  db: {
    schema: 'public'
  },
  global: {
    headers: {
      'x-client-info': 'meeting-notes-manager'
    }
  }
});

// Configurar o tempo de sessão para 24 horas
supabase.auth.onAuthStateChange((event, session) => {
  if (event === 'SIGNED_IN' && session) {
    // Configurar o tempo de expiração da sessão para 24 horas
    const expiresAt = new Date();
    expiresAt.setHours(expiresAt.getHours() + 24);
    
    // Atualizar a sessão com o novo tempo de expiração
    session.expires_at = expiresAt.toISOString();
    
    // Salvar a sessão atualizada
    localStorage.setItem('supabase.auth.token', JSON.stringify(session));
  }
});

// Verificar e limpar sessão inválida
supabase.auth.getSession().then(({ data, error }) => {
  if (error) {
    console.error("[Supabase] Error initializing client:", error);
    // Limpar localStorage em caso de erro
    try {
      const currentTheme = localStorage.getItem('theme');
      localStorage.clear();
      if (currentTheme) {
        localStorage.setItem('theme', currentTheme);
      }
    } catch (storageError) {
      console.error("[Supabase] Error clearing localStorage:", storageError);
    }
  } else {
    console.log("[Supabase] Client initialized successfully.", data.session ? "User session found" : "No active session");
    
    // Se houver sessão, verificar se está dentro do período de 24 horas
    if (data.session) {
      const expiresAt = new Date(data.session.expires_at || '').getTime();
      const now = new Date().getTime();
      const timeLeft = expiresAt - now;
      
      console.log("[Supabase] Session expires in:", Math.round(timeLeft / (1000 * 60 * 60)), "hours");
      
      // Se a sessão estiver próxima de expirar (menos de 1 hora), renovar
      if (timeLeft < 60 * 60 * 1000) {
        console.log("[Supabase] Session near expiration, refreshing...");
        supabase.auth.refreshSession().then(({ data: { session } }) => {
          if (session) {
            // Atualizar o tempo de expiração para mais 24 horas
            const newExpiresAt = new Date();
            newExpiresAt.setHours(newExpiresAt.getHours() + 24);
            session.expires_at = newExpiresAt.toISOString();
            localStorage.setItem('supabase.auth.token', JSON.stringify(session));
          }
        });
      }
    } else {
      try {
        const currentTheme = localStorage.getItem('theme');
        localStorage.clear();
        if (currentTheme) {
          localStorage.setItem('theme', currentTheme);
        }
      } catch (storageError) {
        console.error("[Supabase] Error clearing localStorage:", storageError);
      }
    }
  }
}).catch(error => {
  console.error("[Supabase] Critical error during initialization:", error);
  // Limpar localStorage em caso de erro crítico
  try {
    const currentTheme = localStorage.getItem('theme');
    localStorage.clear();
    if (currentTheme) {
      localStorage.setItem('theme', currentTheme);
    }
  } catch (storageError) {
    console.error("[Supabase] Error clearing localStorage:", storageError);
  }
});

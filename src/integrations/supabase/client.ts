// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ktrbaiijlhssaxpxpzhj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt0cmJhaWlqbGhzc2F4cHhwemhqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA2NjE2MDksImV4cCI6MjA1NjIzNzYwOX0.k2MVB81LUxuAc2PMJOgO8U4yk_lLbNzTkCbqErd0nqE";

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error('Missing Supabase environment variables');
}

console.log("[Supabase] Initializing client...");

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storage: window.localStorage,
    storageKey: 'supabase.auth.token',
    flowType: 'pkce'
  },
  db: {
    schema: 'public'
  },
  global: {
    headers: {
      'x-client-info': 'meeting-notes-manager'
    }
  }
});

// Configurar o tempo de sessão para 24 horas e gerenciar renovação automática
supabase.auth.onAuthStateChange((event, session) => {
  if (event === 'SIGNED_IN' && session) {
    console.log("[Supabase] User signed in, configuring session...");
    
    // Configurar o tempo de expiração da sessão para 24 horas
    const expiresAt = new Date();
    expiresAt.setHours(expiresAt.getHours() + 24);
    
    // Atualizar a sessão com o novo tempo de expiração
    if (session.expires_at) {
      const expiresAtMilliseconds = new Date(expiresAt).getTime();
      session.expires_at = expiresAtMilliseconds;
      localStorage.setItem('supabase.auth.token', JSON.stringify(session));
    }
  }
});

// Verificar e renovar sessão se necessário
supabase.auth.getSession().then(({ data: { session }, error }) => {
  if (error) {
    console.error("[Supabase] Error getting session:", error);
    return;
  }

  if (session) {
    console.log("[Supabase] Active session found");
    
    // Verificar tempo restante da sessão
    const expiresAt = session.expires_at;
    const now = new Date().getTime();
    const timeLeft = (typeof expiresAt === 'string' ? new Date(expiresAt).getTime() : expiresAt || 0) - now;
    
    console.log("[Supabase] Session expires in:", Math.round(timeLeft / (1000 * 60 * 60)), "hours");
    
    // Se a sessão estiver próxima de expirar (menos de 1 hora), renovar
    if (timeLeft < 60 * 60 * 1000) {
      console.log("[Supabase] Session near expiration, refreshing...");
      supabase.auth.refreshSession().then(({ data: { session: newSession } }) => {
        if (newSession) {
          console.log("[Supabase] Session refreshed successfully");
        }
      });
    }
  } else {
    console.log("[Supabase] No active session");
  }
}).catch(error => {
  console.error("[Supabase] Critical error during session check:", error);
});
